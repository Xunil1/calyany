import time

import telebot
import config
from telebot import types
import app

bot = telebot.TeleBot(config.TOKEN)

state = "default"
question_state = 0
questions = ["–í–∞—à–µ –∏–º—è?",
             "–ù–∞ –∫–∞–∫–æ–π –∞–¥—Ä–µ—Å –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
             "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏?",
             "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:",
             "–ß—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç–µ –≤ –∑–∞–ª–æ–≥: –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ 100$?",
             "–°–∫–æ–ª—å–∫–æ –∫–∞–ª—å—è–Ω–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
             "–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–±–∏–≤–∫—É?",
             "C–∫–æ–ª—å–∫–æ —á–∞—à –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
             "–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—à—É?",
             "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—à—É —á—Ç–æ-—Ç–æ –µ—â–µ?"]
keys = ["name", "address", "phone", "comment", "deposit", "order_el", "order_price", "messenger"]
keys_on_rus = ["–ò–º—è", "–ê–¥—Ä–µ—Å", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π", "–ó–∞–ª–æ–≥", "–ó–∞–∫–∞–∑", "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞"]
order = dict()
order_price = 0

def create_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å ‚úÖ")
    item2 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶")

    markup.add(item1, item2)
    return markup


@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –ø–æ –∑–∞–∫–∞–∑—É –∫–∞–ª—å—è–Ω–æ–≤ –Ω–∞ –¥–æ–º. –ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ —Ç—ã –º–æ–∂–µ—à—å —Å –ª–µ–≥–∫–æ—Å—Ç—å—é –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª—å—è–Ω –Ω–∞ –Ω—É–∂–Ω–æ–µ —Ç–µ–±–µ –≤—Ä–µ–º—è!",
                     parse_mode='html',
                     reply_markup=create_keyboard())


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id,
                     '–í–∏–∂—É —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –º–æ—è –ø–æ–º–æ—â—å!\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å ‚úÖ"')


@bot.message_handler(content_types=['text'])
def main_send(message):
    global state
    global order
    global question_state
    global order_price
    if state == "default":
        if message.chat.type == 'private':
            if message.text == '–ó–∞–∫–∞–∑–∞—Ç—å ‚úÖ':
                state = "ordering"
                order = dict()
                question_state = 0
                order_price = 0
                bot.send_message(message.chat.id, questions[question_state], reply_markup=types.ReplyKeyboardRemove())

            elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã üì¶':
                products = app.set_products_into_telegram()
                message_products = ''
                k = 1
                for el in products:
                    message_products += str(k) + ") " + el.name + "\n"
                    k += 1
                bot.send_message(message.chat.id,
                                 '–£ –Ω–∞—Å —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞:\n\n' + message_products + '\n–°–∫–æ—Ä–µ–µ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å ‚úÖ"')
            else:
                bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ–º–Ω–æ–≥–æ –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å /help')
    else:
        if question_state == 5:
            mes = message.text
            mes = mes.replace(" ", "")
            if mes.isdecimal():
                order_price += config.price["–ö–∞–ª—å—è–Ω"] * int(message.text)
                order[keys[len(keys) - 3]] = ["–ö–∞–ª—å—è–Ω —Ö" + message.text]
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ø–æ—Å—Ç—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã).")
                question_state -= 1
        elif question_state == 7:
            mes = message.text
            mes = mes.replace(" ", "")
            if mes.isdecimal():
                order_price += config.price["–î–æ–ø.–∑–∞–±–∏–≤–∫–∞"] * int(message.text)
                order[keys[len(keys) - 3]].append("–î–æ–ø.–∑–∞–±–∏–≤–∫–∞ —Ö" + message.text)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –ø–æ—Å—Ç—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã).")
                question_state -= 1


        elif question_state in [4, 6, 8, 9]:
            bot.send_message(message.chat.id, "–î–ª—è –ª—É—á—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º!")
            question_state -= 1
        else:
            order[keys[question_state]] = message.text
        question_state += 1
        if question_state < len(questions):
            # –ó–∞–ª–æ–≥
            if question_state == 4:
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–ü–∞—Å–ø–æ—Ä—Ç üìï", callback_data="–ø–∞—Å–ø–æ—Ä—Ç")
                item2 = types.InlineKeyboardButton("100$ üíµ", callback_data="100$")
                markup.add(item1, item2)
                bot.send_message(message.chat.id, questions[question_state], reply_markup=markup)
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª—å—è–Ω–æ–≤
            elif question_state == 5:
                bot.send_message(message.chat.id, questions[question_state])
            # –ù—É–∂–Ω–∞ –ª–∏ —á–∞—à–∞
            elif question_state == 6:
                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–î–∞", callback_data="yes-cup")
                item2 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no-cup")
                markup.add(item1, item2)
                bot.send_message(message.chat.id, questions[question_state], reply_markup=markup)
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—à
            elif question_state == 7:
                bot.send_message(message.chat.id, questions[question_state])
            # –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—à—É
            elif question_state == 8:
                products = app.set_products_into_telegram()
                items = []
                for el in products:
                    items.append(types.InlineKeyboardButton(el.name, callback_data=el.name))
                markup = types.InlineKeyboardMarkup(row_width=4)
                markup.add(*items)
                bot.send_message(message.chat.id, questions[question_state], reply_markup=markup)
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            elif question_state == 9:
                item1 = types.InlineKeyboardButton("–î–∞", callback_data="yes")
                item2 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no")
                markup = types.InlineKeyboardMarkup(row_width=2)
                markup.add(item1, item2)
                bot.send_message(message.chat.id, questions[question_state], reply_markup=markup)
            else:
                bot.send_message(message.chat.id, questions[question_state])


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global question_state
    global state
    global order_price
    products = app.set_products_into_telegram()
    products_list = []
    for el in products:
        products_list.append(el.name)
    try:
        if call.message:
            #deposit
            if call.data == "–ø–∞—Å–ø–æ—Ä—Ç" or call.data == "100$":
                order[keys[question_state]] = call.data
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=call.message.text, reply_markup=None)
                bot.send_message(call.message.chat.id, "–í –∑–∞–ª–æ–≥ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω: " + call.data)

                question_state += 1

                bot.send_message(call.message.chat.id, questions[question_state])
            #confirm (end)
            elif call.data == "confirm":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=call.message.text, reply_markup=None)
                if app.add_order_from_telegram(order):
                    bot.send_message(call.message.chat.id,
                                     "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.",
                                     reply_markup=create_keyboard())
                else:
                    bot.send_message(call.message.chat.id,
                                     "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∑–∞–∫–∞–∑–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.",
                                     reply_markup=create_keyboard())
            elif call.data == "cancel":

                bot.send_message(call.message.chat.id,
                                 "–ù–∞—á–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–Ω–æ–≤–æ!", reply_markup=create_keyboard())

            # add_order
            elif call.data in products_list:
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=call.data + " –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—à—É.", reply_markup=None)

                flag = True
                for el in order[keys[5]]:
                    if call.data == el[:-3]:
                        order[keys[5]][order[keys[5]].index(el)] = el[:-1] + str(int(el[-1]) + 1)
                        flag = False
                if flag:
                    order[keys[5]].append(call.data + " x1")


                question_state += 1

                item1 = types.InlineKeyboardButton("–î–∞", callback_data="yes")
                item2 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no")
                markup = types.InlineKeyboardMarkup(row_width=2)
                markup.add(item1, item2)
                bot.send_message(call.message.chat.id, questions[question_state], reply_markup=markup)

            # add_to_order_more
            elif call.data == "yes":
                question_state -= 1
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–î–æ–±–∞–≤–∏–º –µ—â–µ.", reply_markup=None)
                products = app.set_products_into_telegram()
                items = []
                for el in products:
                    items.append(types.InlineKeyboardButton(el.name, callback_data=el.name))
                markup = types.InlineKeyboardMarkup(row_width=4)
                markup.add(*items)
                bot.send_message(call.message.chat.id, questions[question_state], reply_markup=markup)
            elif call.data == "no":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ñ–∞–ª–∫–æ, —á—Ç–æ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏(", reply_markup=None)
                message_for_user = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"
                order[keys[len(keys) - 1]] = "@" + call.message.chat.username
                for i in range(0, len(keys_on_rus) - 2):

                    message_for_user += keys_on_rus[i] + ": " + order[keys[i]] + "\n"

                order_message = ''
                for_order = ''
                for el in order[keys[len(keys) - 3]]:
                    order_message += "     " + el + "\n"
                    for_order += el + ";"

                order[keys[len(keys) - 3]] = for_order
                order[keys[len(keys) - 2]] = order_price


                message_for_user += keys_on_rus[len(keys_on_rus) - 2] + ": \n" + order_message + "\n"

                message_for_user += keys_on_rus[len(keys_on_rus) - 1] + ": " + str(order_price) + " GEL\n"



                state = "default"

                markup = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm")
                item2 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel")

                markup.add(item1, item2)

                bot.send_message(call.message.chat.id, message_for_user, reply_markup=markup)

            #add_extra_cup
            elif call.data == "yes-cup":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=call.message.text, reply_markup=None)
                question_state += 1
                bot.send_message(call.message.chat.id, questions[question_state])
            elif call.data == "no-cup":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=call.message.text, reply_markup=None)
                question_state += 2
                products = app.set_products_into_telegram()
                items = []
                for el in products:
                    items.append(types.InlineKeyboardButton(el.name, callback_data=el.name))
                markup = types.InlineKeyboardMarkup(row_width=4)
                markup.add(*items)
                bot.send_message(call.message.chat.id, questions[question_state], reply_markup=markup)
    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)
